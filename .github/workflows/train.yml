name: TrainAction

on:
  push:
    branches-ignore: 
      - 'main'
      - 'preview'

jobs:
  train:
    runs-on: ubuntu-latest
    steps:
      # Step 1: Check how many runs in last 90 min
      - name: Check recent runs
        id: check_runs
        uses: actions/github-script@v6
        with:
          script: |
            const now = new Date().getTime();
            // List 30 runs (an arbitrary upper bound)
            const runs = await github.rest.actions.listWorkflowRuns({
              owner: context.repo.owner,
              repo: context.repo.repo,
              workflow_id: "train.yml", // or the numeric ID
              event: "push",
              per_page: 30
            });

            let recentCount = 0;
            for (const run of runs.data.workflow_runs) {
              const createdTime = new Date(run.created_at).getTime();
              // 90 minutes in milliseconds:
              if (now - createdTime < 90 * 60 * 1000) {
                recentCount++;
              }
            }

            // If there are 2 or more in the last 90 min, skip or fail
            if (recentCount >= 2) {
              core.setOutput("can_run", "false");
            } else {
              core.setOutput("can_run", "true");
            }

      # Step 2: Conditionally run the real training only if allowed
      - name: Checkout Code
        if: steps.check_runs.outputs.can_run == 'true'
        uses: actions/checkout@v3

      - name: Configure AWS Credentials
        if: steps.check_runs.outputs.can_run == 'true'
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Build and Push Docker Images
        uses: ./.github/actions/training/build-and-push
        with:
          ecr_registry: ${{ secrets.ECR_REGISTRY }}
          ecr_repository: ${{ secrets.ECR_REPOSITORY }}
          aws_access_key_id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws_secret_access_key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws_region: ${{ secrets.AWS_REGION }}
          training_image: ${{ secrets.ECR_REPOSITORY }}:train-${{ github.sha }}
          pipeline_image: ${{ secrets.ECR_REPOSITORY }}:pipeline-${{ github.sha }}
      # ----------------------------------------------------------------
      # BUILD the pipeline container locally (optional), if you want to run 
      # it directly in this workflow. Alternatively, you can re-use the 
      # ECR push if your build-and-push action already handles pipeline logic.
      # ----------------------------------------------------------------
      # - name: Build pipeline container
      #   run: |
      #     docker build \
      #       -t pipeline-docker \
      #       -f docker/training/PipelineDockerfile \
      #       .


      - name: Log into Amazon ECR
        shell: bash
        run: |
          aws ecr get-login-password --region ${{ secrets.AWS_REGION }} \
          | docker login --username AWS --password-stdin ${{ secrets.ECR_REGISTRY }}

      # ----------------------------------------------------------------
      # RUN the pipeline container, passing environment variables for Sagemaker
      # ----------------------------------------------------------------
      - name: Run Sagemaker Pipeline Container
        env:
          S3_BUCKET: ${{ secrets.S3_BUCKET }}
          SAGE_MAKER_EXECUTION_ROLE: ${{ secrets.SAGE_MAKER_EXECUTION_ROLE }}
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_SESSION_TOKEN: ${{ steps.configure-aws-credentials.outputs.aws_session_token }}
          AWS_REGION: ${{ secrets.AWS_REGION }}
          MLFLOW_TRACKING_ARN: ${{ secrets.MLFLOW_TRACKING_ARN }}
          ECR_REGISTRY: ${{ secrets.ECR_REGISTRY }}
          ECR_REPOSITORY: ${{ secrets.ECR_REPOSITORY }}
          GITHUB_SHA: ${{ github.sha }}
        run: |
          docker run --rm \
            -e S3_BUCKET \
            -e SAGE_MAKER_EXECUTION_ROLE \
            -e AWS_ACCESS_KEY_ID \
            -e AWS_SECRET_ACCESS_KEY \
            -e AWS_SESSION_TOKEN \
            -e AWS_REGION \
            -e MLFLOW_TRACKING_ARN \
            -e ECR_REGISTRY \
            -e ECR_REPOSITORY \
            -e GITHUB_SHA \
            ${{ secrets.ECR_REGISTRY }}/${{ secrets.ECR_REPOSITORY }}:pipeline-${{ github.sha }} \
            conda run -n pipeline-env python /opt/ml/code/pipeline.py

      # - name: Upload Run ID to S3
      #   run: |
      #     aws s3 cp /opt/ml/model/run_id.txt s3://${{ secrets.S3_BUCKET }}/run_ids/${{ github.sha }}_run_id.txt
